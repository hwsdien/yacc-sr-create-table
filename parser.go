// Code generated by goyacc -o parser.go -p sr ./parser.y. DO NOT EDIT.

//line ./parser.y:2
package main

import __yyfmt__ "fmt"

//line ./parser.y:2

import (
	"fmt"
	"strconv"
)

var tmpValues []string

//line ./parser.y:12
type srSymType struct {
	yys     int
	stmt    string
	col     string
	agg     string
	word    string
	ident   string
	num     string
	values  []string
	boolean bool
}

const identifier = 57346
const number = 57347
const create = 57348
const external = 57349
const table = 57350
const ifWord = 57351
const not = 57352
const exists = 57353
const null = 57354
const defaultWord = 57355
const primaryWord = 57356
const keyWord = 57357
const partitionWord = 57358
const byWord = 57359
const rangeWord = 57360
const valuesWord = 57361
const distributedWord = 57362
const hashWord = 57363
const bucketsWord = 57364
const propertiesWord = 57365
const tinyintType = 57366
const smallintType = 57367
const intType = 57368
const bigintType = 57369
const largeIntType = 57370
const floatType = 57371
const doubleType = 57372
const decimalType = 57373
const dateType = 57374
const dateTimeType = 57375
const charType = 57376
const varcharType = 57377
const stringType = 57378
const hllType = 57379
const bitmapType = 57380
const sum = 57381
const max = 57382
const min = 57383
const replace = 57384
const hllUnion = 57385
const bitmapUnion = 57386
const replaceIfNotNull = 57387

var srToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"identifier",
	"number",
	"'['",
	"'('",
	"')'",
	"','",
	"'.'",
	"'-'",
	"';'",
	"create",
	"external",
	"table",
	"ifWord",
	"not",
	"exists",
	"null",
	"defaultWord",
	"primaryWord",
	"keyWord",
	"partitionWord",
	"byWord",
	"rangeWord",
	"valuesWord",
	"distributedWord",
	"hashWord",
	"bucketsWord",
	"propertiesWord",
	"tinyintType",
	"smallintType",
	"intType",
	"bigintType",
	"largeIntType",
	"floatType",
	"doubleType",
	"decimalType",
	"dateType",
	"dateTimeType",
	"charType",
	"varcharType",
	"stringType",
	"hllType",
	"bitmapType",
	"sum",
	"max",
	"min",
	"replace",
	"hllUnion",
	"bitmapUnion",
	"replaceIfNotNull",
	"'\"'",
	"'='",
}

var srStatenames = [...]string{}

const srEofCode = 1
const srErrCode = 2
const srInitialStackSize = 16

//line ./parser.y:316

//line yacctab:1
var srExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const srPrivate = 57344

const srLast = 95

var srAct = [...]int8{
	89, 79, 60, 68, 76, 65, 40, 41, 29, 43,
	30, 31, 77, 52, 20, 35, 32, 86, 45, 44,
	33, 36, 80, 24, 25, 18, 57, 50, 58, 49,
	16, 12, 9, 7, 6, 3, 4, 91, 92, 82,
	83, 95, 38, 66, 67, 54, 55, 26, 27, 74,
	15, 70, 90, 75, 62, 53, 51, 37, 14, 87,
	81, 93, 84, 73, 61, 71, 69, 64, 63, 47,
	72, 21, 22, 11, 1, 48, 88, 59, 42, 34,
	78, 23, 46, 17, 56, 85, 39, 28, 19, 13,
	10, 8, 5, 94, 2,
}

var srPact = [...]int16{
	22, -1000, 24, 20, -1000, 18, -1000, 16, 69, 14,
	51, 40, 12, 4, 67, 68, -1000, 0, 2, 39,
	-1000, -23, -1000, -12, -3, 50, -1000, 67, -40, -1000,
	-1000, -1000, -1000, -1000, -21, -5, -7, 65, -1000, 10,
	-1000, -1000, -1000, 49, -15, 48, 37, -1000, 6, -1000,
	9, 60, 47, 64, -1000, 63, -1000, -48, -1000, 35,
	-1000, -51, 62, 43, -1000, 61, -1000, 60, 59, 41,
	46, -49, -1000, -1000, -17, -1, -1000, 55, 31, -1000,
	58, -1000, -1000, -1, -9, -1000, 53, 45, 29, -1000,
	57, -1000, 45, 33, -1000, -1000,
}

var srPgo = [...]int8{
	0, 94, 92, 91, 90, 89, 88, 14, 87, 86,
	84, 83, 82, 81, 80, 1, 0, 79, 78, 77,
	2, 76, 75, 74,
}

var srR1 = [...]int8{
	0, 23, 23, 23, 1, 2, 2, 3, 3, 4,
	4, 5, 5, 6, 6, 6, 7, 8, 8, 8,
	8, 8, 8, 9, 9, 9, 22, 22, 22, 10,
	10, 11, 11, 12, 12, 12, 13, 13, 14, 14,
	14, 15, 15, 21, 21, 21, 16, 16, 17, 17,
	18, 18, 19, 19, 19, 20, 20,
}

var srR2 = [...]int8{
	0, 0, 1, 2, 10, 0, 1, 0, 3, 1,
	3, 0, 3, 0, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 0, 1, 1, 0, 1, 2, 0,
	4, 0, 5, 0, 1, 3, 0, 9, 0, 1,
	3, 0, 6, 0, 1, 3, 0, 3, 0, 8,
	0, 4, 0, 1, 3, 0, 3,
}

var srChk = [...]int16{
	-1000, -23, -1, 13, 12, -2, 14, 15, -3, 16,
	-4, 4, 17, -5, 7, 10, 18, -11, 21, -6,
	-7, 4, 4, -13, 23, 22, 8, 9, -8, 31,
	33, 34, 39, 43, -17, 27, 24, 7, -7, -9,
	46, 47, -18, 30, 24, 25, -12, 4, -22, 19,
	17, 7, 28, 7, 8, 9, -10, 20, 19, -19,
	-20, 4, 7, 4, 4, 53, 8, 9, 54, 4,
	8, 4, -20, 4, 8, 7, 53, 29, -14, -15,
	23, 5, 8, 9, 4, -15, 26, 6, -21, -16,
	7, 8, 9, 4, -16, 8,
}

var srDef = [...]int8{
	1, -2, 2, 5, 3, 0, 6, 7, 0, 0,
	11, 9, 0, 31, 13, 0, 8, 36, 0, 0,
	14, 17, 10, 48, 0, 0, 12, 0, 23, 18,
	19, 20, 21, 22, 50, 0, 0, 33, 15, 26,
	24, 25, 4, 0, 0, 0, 0, 34, 29, 27,
	0, 52, 0, 0, 32, 0, 16, 0, 28, 0,
	53, 0, 0, 0, 35, 0, 51, 55, 0, 0,
	0, 0, 54, 56, 0, 38, 30, 0, 0, 39,
	0, 49, 37, 41, 0, 40, 0, 43, 0, 44,
	0, 42, 46, 0, 45, 47,
}

var srTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 53, 3, 3, 3, 3, 3,
	7, 8, 3, 3, 9, 11, 10, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 12,
	3, 54, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 6,
}

var srTok2 = [...]int8{
	2, 3, 4, 5, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52,
}

var srTok3 = [...]int8{
	0,
}

var srErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	srDebug        = 0
	srErrorVerbose = false
)

type srLexer interface {
	Lex(lval *srSymType) int
	Error(s string)
}

type srParser interface {
	Parse(srLexer) int
	Lookahead() int
}

type srParserImpl struct {
	lval  srSymType
	stack [srInitialStackSize]srSymType
	char  int
}

func (p *srParserImpl) Lookahead() int {
	return p.char
}

func srNewParser() srParser {
	return &srParserImpl{}
}

const srFlag = -1000

func srTokname(c int) string {
	if c >= 1 && c-1 < len(srToknames) {
		if srToknames[c-1] != "" {
			return srToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func srStatname(s int) string {
	if s >= 0 && s < len(srStatenames) {
		if srStatenames[s] != "" {
			return srStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func srErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !srErrorVerbose {
		return "syntax error"
	}

	for _, e := range srErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + srTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(srPact[state])
	for tok := TOKSTART; tok-1 < len(srToknames); tok++ {
		if n := base + tok; n >= 0 && n < srLast && int(srChk[int(srAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if srDef[state] == -2 {
		i := 0
		for srExca[i] != -1 || int(srExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; srExca[i] >= 0; i += 2 {
			tok := int(srExca[i])
			if tok < TOKSTART || srExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if srExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += srTokname(tok)
	}
	return res
}

func srlex1(lex srLexer, lval *srSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(srTok1[0])
		goto out
	}
	if char < len(srTok1) {
		token = int(srTok1[char])
		goto out
	}
	if char >= srPrivate {
		if char < srPrivate+len(srTok2) {
			token = int(srTok2[char-srPrivate])
			goto out
		}
	}
	for i := 0; i < len(srTok3); i += 2 {
		token = int(srTok3[i+0])
		if token == char {
			token = int(srTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(srTok2[1]) /* unknown char */
	}
	if srDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", srTokname(token), uint(char))
	}
	return char, token
}

func srParse(srlex srLexer) int {
	return srNewParser().Parse(srlex)
}

func (srrcvr *srParserImpl) Parse(srlex srLexer) int {
	var srn int
	var srVAL srSymType
	var srDollar []srSymType
	_ = srDollar // silence set and not used
	srS := srrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	srstate := 0
	srrcvr.char = -1
	srtoken := -1 // srrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		srstate = -1
		srrcvr.char = -1
		srtoken = -1
	}()
	srp := -1
	goto srstack

ret0:
	return 0

ret1:
	return 1

srstack:
	/* put a state and value onto the stack */
	if srDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", srTokname(srtoken), srStatname(srstate))
	}

	srp++
	if srp >= len(srS) {
		nyys := make([]srSymType, len(srS)*2)
		copy(nyys, srS)
		srS = nyys
	}
	srS[srp] = srVAL
	srS[srp].yys = srstate

srnewstate:
	srn = int(srPact[srstate])
	if srn <= srFlag {
		goto srdefault /* simple state */
	}
	if srrcvr.char < 0 {
		srrcvr.char, srtoken = srlex1(srlex, &srrcvr.lval)
	}
	srn += srtoken
	if srn < 0 || srn >= srLast {
		goto srdefault
	}
	srn = int(srAct[srn])
	if int(srChk[srn]) == srtoken { /* valid shift */
		srrcvr.char = -1
		srtoken = -1
		srVAL = srrcvr.lval
		srstate = srn
		if Errflag > 0 {
			Errflag--
		}
		goto srstack
	}

srdefault:
	/* default state action */
	srn = int(srDef[srstate])
	if srn == -2 {
		if srrcvr.char < 0 {
			srrcvr.char, srtoken = srlex1(srlex, &srrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if srExca[xi+0] == -1 && int(srExca[xi+1]) == srstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			srn = int(srExca[xi+0])
			if srn < 0 || srn == srtoken {
				break
			}
		}
		srn = int(srExca[xi+1])
		if srn < 0 {
			goto ret0
		}
	}
	if srn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			srlex.Error(srErrorMessage(srstate, srtoken))
			Nerrs++
			if srDebug >= 1 {
				__yyfmt__.Printf("%s", srStatname(srstate))
				__yyfmt__.Printf(" saw %s\n", srTokname(srtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for srp >= 0 {
				srn = int(srPact[srS[srp].yys]) + srErrCode
				if srn >= 0 && srn < srLast {
					srstate = int(srAct[srn]) /* simulate a shift of "error" */
					if int(srChk[srstate]) == srErrCode {
						goto srstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if srDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", srS[srp].yys)
				}
				srp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if srDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", srTokname(srtoken))
			}
			if srtoken == srEofCode {
				goto ret1
			}
			srrcvr.char = -1
			srtoken = -1
			goto srnewstate /* try again in the same state */
		}
	}

	/* reduction by production srn */
	if srDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", srn, srStatname(srstate))
	}

	srnt := srn
	srpt := srp
	_ = srpt // guard against "declared and not used"

	srp -= int(srR2[srn])
	// srp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if srp+1 >= len(srS) {
		nyys := make([]srSymType, len(srS)*2)
		copy(nyys, srS)
		srS = nyys
	}
	srVAL = srS[srp+1]

	/* consult goto table to find next state */
	srn = int(srR1[srn])
	srg := int(srPgo[srn])
	srj := srg + srS[srp].yys + 1

	if srj >= srLast {
		srstate = int(srAct[srg])
	} else {
		srstate = int(srAct[srj])
		if int(srChk[srstate]) != -srn {
			srstate = int(srAct[srg])
		}
	}
	// dummy call; replaced with literal code
	switch srnt {

	case 1:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:121
		{
		}
	case 2:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:123
		{
			srVAL.stmt = srDollar[1].stmt
		}
	case 3:
		srDollar = srS[srpt-2 : srpt+1]
//line ./parser.y:125
		{
			srVAL.stmt = srDollar[1].stmt
		}
	case 4:
		srDollar = srS[srpt-10 : srpt+1]
//line ./parser.y:130
		{
		}
	case 5:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:133
		{
		}
	case 6:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:135
		{
			srVAL.stmt = srDollar[1].word
		}
	case 7:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:139
		{
		}
	case 8:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:141
		{
		}
	case 9:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:145
		{
			srlex.(*tableLex).tableInfo.TableName = srDollar[1].ident
		}
	case 10:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:149
		{
			srlex.(*tableLex).tableInfo.Database = srDollar[1].ident
			srlex.(*tableLex).tableInfo.TableName = srDollar[3].ident
		}
	case 11:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:156
		{
		}
	case 12:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:158
		{
			srVAL.stmt = srDollar[2].stmt
		}
	case 13:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:161
		{
		}
	case 14:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:163
		{
			srVAL.stmt = srDollar[1].stmt
		}
	case 15:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:165
		{
			srVAL.stmt = srDollar[1].stmt
		}
	case 16:
		srDollar = srS[srpt-5 : srpt+1]
//line ./parser.y:168
		{
			srlex.(*tableLex).tableInfo.ColumnList = append(
				srlex.(*tableLex).tableInfo.ColumnList,
				ColumnField{ColName: srDollar[1].ident, ColType: srDollar[2].word, IsNull: srDollar[4].boolean},
			)
		}
	case 17:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:176
		{
		}
	case 18:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:178
		{
			srVAL.stmt = srDollar[1].col
		}
	case 19:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:180
		{
			srVAL.stmt = srDollar[1].col
		}
	case 20:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:182
		{
			srVAL.stmt = srDollar[1].col
		}
	case 21:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:184
		{
			srVAL.stmt = srDollar[1].col
		}
	case 22:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:186
		{
			srVAL.stmt = srDollar[1].col
		}
	case 23:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:189
		{
		}
	case 24:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:191
		{
		}
	case 25:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:193
		{
		}
	case 26:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:196
		{
			srVAL.boolean = true
		}
	case 27:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:198
		{
			srVAL.boolean = true
		}
	case 28:
		srDollar = srS[srpt-2 : srpt+1]
//line ./parser.y:200
		{
			srVAL.boolean = false
		}
	case 29:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:203
		{
		}
	case 30:
		srDollar = srS[srpt-4 : srpt+1]
//line ./parser.y:205
		{
		}
	case 31:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:208
		{
		}
	case 32:
		srDollar = srS[srpt-5 : srpt+1]
//line ./parser.y:210
		{
		}
	case 33:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:213
		{
		}
	case 34:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:215
		{
			srlex.(*tableLex).tableInfo.PrimaryKeyList = append(
				srlex.(*tableLex).tableInfo.PrimaryKeyList,
				srDollar[1].ident,
			)

			srVAL.stmt = srDollar[1].ident
		}
	case 35:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:224
		{
			srlex.(*tableLex).tableInfo.PrimaryKeyList = append(
				srlex.(*tableLex).tableInfo.PrimaryKeyList,
				srDollar[3].ident,
			)
			srVAL.stmt = srDollar[3].ident
		}
	case 36:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:233
		{
		}
	case 37:
		srDollar = srS[srpt-9 : srpt+1]
//line ./parser.y:235
		{
			srlex.(*tableLex).tableInfo.PartitionRangeData.RangeValue = srDollar[5].ident
			srVAL.stmt = srDollar[5].ident
		}
	case 38:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:241
		{
		}
	case 39:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:243
		{
			fmt.Println(srDollar[1].stmt)
		}
	case 40:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:245
		{
			fmt.Println(srDollar[3].stmt)
		}
	case 41:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:248
		{
		}
	case 42:
		srDollar = srS[srpt-6 : srpt+1]
//line ./parser.y:250
		{
			srlex.(*tableLex).tableInfo.PartitionRangeData.PartitionList = append(
				srlex.(*tableLex).tableInfo.PartitionRangeData.PartitionList,
				PartitionInfo{
					Name:   srDollar[2].ident,
					Values: srDollar[5].values,
				},
			)

			tmpValues = make([]string, 0)
		}
	case 43:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:263
		{
		}
	case 44:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:265
		{
			tmpValues = append(tmpValues, srDollar[1].stmt)
			srVAL.values = tmpValues
		}
	case 45:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:271
		{
			tmpValues = append(tmpValues, srDollar[3].stmt)
			srVAL.values = tmpValues
		}
	case 46:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:277
		{
		}
	case 47:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:279
		{
			srVAL.stmt = srDollar[2].ident
		}
	case 48:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:282
		{
		}
	case 49:
		srDollar = srS[srpt-8 : srpt+1]
//line ./parser.y:284
		{
			srlex.(*tableLex).tableInfo.DistributedData.HashField = srDollar[5].ident
			srlex.(*tableLex).tableInfo.DistributedData.BucketCount, _ = strconv.Atoi(srDollar[8].num)
		}
	case 50:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:290
		{
		}
	case 51:
		srDollar = srS[srpt-4 : srpt+1]
//line ./parser.y:292
		{
			srVAL.stmt = srDollar[3].stmt
		}
	case 52:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:296
		{
		}
	case 53:
		srDollar = srS[srpt-1 : srpt+1]
//line ./parser.y:298
		{
			srVAL.stmt = srDollar[1].stmt
		}
	case 54:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:300
		{
			srVAL.stmt = srDollar[3].stmt
		}
	case 55:
		srDollar = srS[srpt-0 : srpt+1]
//line ./parser.y:303
		{
		}
	case 56:
		srDollar = srS[srpt-3 : srpt+1]
//line ./parser.y:305
		{
			srlex.(*tableLex).tableInfo.PropertiesData = append(
				srlex.(*tableLex).tableInfo.PropertiesData,
				KeyValueInfo{
					Key:   srDollar[1].ident,
					Value: srDollar[3].ident,
				},
			)
			srVAL.stmt = srDollar[1].ident
		}
	}
	goto srstack /* stack new state and value */
}
